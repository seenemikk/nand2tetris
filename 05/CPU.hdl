// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and e
 
 xecute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16 (a[0..14] = instruction[0..14], a[15] = false, b = aluOutMux, sel = instruction[15], out = muxOut);
    // ~15 || (15 && 5)
    Not (in = instruction[15], out = not15);
    Or (a = not15, b = instruction[5], out = aControl);
    ARegister (in = muxOut, load = aControl, out = aRegister1, out = aRegister2, out[0..14] = addressM);
    
    Mux16 (a = aRegister1, b = inM, sel = instruction[12], out = aluInY);
    DRegister (in = aluOutD, load = dControl, out = aluInX);
    // 15 && 4
    And (a = instruction[15], b = instruction[4], out = dControl);
    
    // ALU
    ALU (x = aluInX, y = aluInY, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = aluOutD, out = outM, out = aluOutMux, zr = zr, ng = ng);
    
    // writeM
    And (a = instruction[15], b = instruction[3], out = writeM);
    
    PC (in = aRegister2, load = ll, inc = true, reset = reset, out[0..14] = pc);
    
    Not (in = zr, out = notZR);
    Not (in = ng, out = notNG);
    
    And (a = instruction[0], b = notZR, out = a1);
    And (a = a1, b = notNG, out = o1);
    
    And (a = instruction[1], b = zr, out = a2);
    And (a = a2, b = notNG, out = o2);
    
    And (a = instruction[2], b = notZR, out = a3);
    And (a = a3, b = ng, out = o3);
    
    And (a = instruction[0], b = instruction[2], out = a4);
    And (a = a4, b = instruction[3], out = o4);
    
    Or (a = o1, b = o2, out = o11);
    Or (a = o3, b = o4, out = o22);
    Or (a = o11, b = o22, out = l);
    
	And (a = l, b = instruction[15], out = ll);
}
